import groovy.json.JsonSlurper

plugins {
    id 'java'
}

repositories {
    mavenCentral()
    ivy {
        url 'https://github.com/'
        patternLayout {
            artifact '/[organization]/[module]/releases/download/[revision]/[ext]'
        }
        metadataSources {
            artifact()
        }
    }
    ivy {
        url 'https://github.com/'
        patternLayout {
            artifact '/[organization]/[module]/raw/master/jars/[revision]'
        }
        metadataSources {
            artifact()
        }
    }
}

// project level config
java {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

// where to find sources
sourceSets.main.java.srcDirs = ['src/']

// build everything and make a jar
build {
    doLast {
        copy {
            from 'assets'
            from jar
            into '.'
        }
    }
}

// compile time dependencies
dependencies {
    implementation "jaghaimo:starsector-api:0.95.1a-RC6@starfarer.api.jar"
    implementation "Histidine91:Nexerelin:ExerelinCore.jar"

    // game dependencies
    implementation group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.10'
    implementation group: 'org.lwjgl.lwjgl', name: 'lwjgl', version: '2.9.3'
    implementation group: 'org.lwjgl.lwjgl', name: 'lwjgl_util', version: '2.9.3'
    implementation group: 'log4j', name: 'log4j', version: '1.2.9'
    implementation group: 'org.json', name: 'json', version: '20090211'
    implementation group: 'net.java.jinput', name: 'jinput', version: '2.0.7'
    implementation group: 'org.codehaus.janino', name: 'janino', version: '3.0.7'

    // lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
}

// custom tasks
task releaseVanilla(type: Zip) {
    dependsOn build
    archiveFileName = "${project.name}-${readModInfoJson().version}-vanilla.zip"
    destinationDirectory = file(rootDir)
    from 'assets'
    from 'assets-conditional/vanilla'
    from jar
    into project.name
}
task releaseNexerelin(type: Zip) {
    dependsOn build
    archiveFileName = "${project.name}-${readModInfoJson().version}-nexerelin.zip"
    destinationDirectory = file(rootDir)
    from 'assets'
    from 'assets-conditional/nexerelin'
    from jar
    into project.name
}
task release() {
    dependsOn releaseVanilla
    dependsOn releaseNexerelin
}

// methods
def readModInfoJson() {
    def jsonFile = file('assets/mod_info.json')
    def slurper = new JsonSlurper()
    return slurper.parse(jsonFile)
}
